[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
#da_filter <- da_filter[da_filter$Type != "Random" , ]
data_wf0 <- da_filter %>%
group_by(workloadf0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_wf1 <- da_filter %>%
group_by(workloadg0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_wf2 <- da_filter %>%
group_by(workloadl0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
# Represent it
P1 <- data_wf0 %>%
ggplot( aes(x=workloadf0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",f[0]," as ", Wf[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P2 <- data_wf1 %>%
ggplot( aes(x=workloadg0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",g[0]," as ", wg[1])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P3 <- data_wf2 %>%
ggplot( aes(x=workloadl0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",l[0]," as ", wl[2])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
P3 <- data_wf2 %>%
ggplot( aes(x=workloadl0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",l[0]," as ", wl[2])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
data_wf2 <- da_filter %>%
group_by(workloadl0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
# 按照 category 列进行分组
#test <- df[df$Type != "FunAssigned" | df$SolutionQuality != "non-optimal", ]
da_filter <- dfwf[dfwf$Xp != "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
#da_filter <- da_filter[da_filter$Type != "Random" , ]
data_wf0 <- da_filter %>%
group_by(workloadf0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_wf1 <- da_filter %>%
group_by(workloadg0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_wf2 <- da_filter %>%
group_by(workloadl0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
dfwf<-read.csv('datawf_exp.csv')
# 按照 category 列进行分组
#test <- df[df$Type != "FunAssigned" | df$SolutionQuality != "non-optimal", ]
da_filter <- dfwf[dfwf$Xp != "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
#da_filter <- da_filter[da_filter$Type != "Random" , ]
data_wf0 <- da_filter %>%
group_by(workloadf0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_wf1 <- da_filter %>%
group_by(workloadg0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_wf2 <- da_filter %>%
group_by(workloadl0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
# Represent it
P1 <- data_wf0 %>%
ggplot( aes(x=workloadf0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",f[0]," as ", Wf[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P2 <- data_wf1 %>%
ggplot( aes(x=workloadg0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",g[0]," as ", wg[1])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P3 <- data_wf2 %>%
ggplot( aes(x=workloadl0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",l[0]," as ", wl[2])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
# Represent it
P1 <- data_wf0 %>%
ggplot( aes(x=workloadf0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",f[0]," as ", Wf[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P2 <- data_wf1 %>%
ggplot( aes(x=workloadg0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",g[0]," as ", wg[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P3 <- data_wf2 %>%
ggplot( aes(x=workloadl0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Workload of function ",l[0]," as ", wl[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
#combined_plot
P3
#combined_plot
P2
#combined_plot
P1
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
# 按照 category 列进行分组
#test <- df[df$Type != "FunAssigned" | df$SolutionQuality != "non-optimal", ]
da_filter <- df[df$Xp != "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
#da_filter <- da_filter[da_filter$Type != "Random" , ]
data_w0 <- da_filter %>%
group_by(omegaf0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_w1 <- da_filter %>%
group_by(omegag0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_w2 <- da_filter %>%
group_by(omegal0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
# Represent it
P1 <- data_w0 %>%
ggplot( aes(x=omegaf0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",f[0]," as ", omega[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
+gghighlight::gghighlight(Type = FunAssigned)
P2 <- data_w1 %>%
ggplot( aes(x=omegag0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",g[0]," as ", omega[1])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P3 <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",l[0]," as ", omega[2])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
View(dfwf)
# 创建条件向量
dcondition_o <- (dfwf$workloadf0 == 50) & (dfwf$workloadg0 == 50) & (dfwf$workloadl0 == 50)
dcondition_f <- (dfwf$workloadf0 == 550) & (dfwf$workloadg0 == 50) & (dfwf$workloadl0 == 50)
dcondition_g <- (dfwf$workloadf0 == 50) & (dfwf$workloadg0 == 550) & (dfwf$workloadl0 == 50)
dcondition_l <- (dfwf$workloadf0 == 50) & (dfwf$workloadg0 == 50) & (dfwf$workloadl0 == 550)
dselected_rows <- dfwf[dcondition_o,]
dselected_rowsf <- dfwf[dcondition_f, ]
dselected_rowsg <- dfwf[dcondition_g, ]
dselected_rowsl <- dfwf[dcondition_l, ]
h0 <- hypergraph_from_edgelist(DrawHyperGraphOfFunctions(dselected_rows))
h1 <- hypergraph_from_edgelist(DrawHyperGraphOfFunctions(dselected_rowsf))
h2 <- hypergraph_from_edgelist(DrawHyperGraphOfFunctions(dselected_rowsg))
dselected_rows
dselected_rowsf
dselected_rowsf
# 创建条件向量
condition_o <- (da_test$omegaf0 == 20) & (da_test$omegag0 == 20) & (da_test$omegal0 == 20)
condition_f <- (da_test$omegaf0 == 45) & (da_test$omegag0 == 20) & (da_test$omegal0 == 20)
condition_g <- (da_test$omegaf0 == 20) & (da_test$omegag0 == 45) & (da_test$omegal0 == 20)
condition_l <- (da_test$omegaf0 == 20) & (da_test$omegag0 == 20) & (da_test$omegal0 == 45)
# 使用条件向量过滤数据框
selected_rows <- da_test[condition_o, ]
selected_rowsf <- da_test[condition_f, ]
selected_rowsg <- da_test[condition_g, ]
selected_rowsl <- da_test[condition_l, ]
selected_rows
selected_rowsf
selected_rowsg
selected_rowsl
dcondition_o <- (df$omegaf0 == 10) & (df$omegag0 == 10) & (df$omegal0 == 10)
dcondition_f <- (df$omegaf0 == 50) & (df$omegag0 == 10) & (df$omegal0 == 10)
dcondition_g <- (df$omegaf0 == 10) & (df$omegag0 == 50) & (df$omegal0 == 10)
dcondition_l <- (df$omegaf0 == 10) & (df$omegag0 == 10) & (df$omegal0 == 50)
dselected_rows <- df[dcondition_o,]
dselected_rowsf <- df[dcondition_f, ]
dselected_rowsg <- df[dcondition_g, ]
dselected_rowsl <- df[dcondition_l, ]
dselected_rows
# 创建条件向量
dcondition_o <- (dfwf$workloadf0 == 100) & (dfwf$workloadg0 == 100) & (dfwf$workloadl0 == 100)
dcondition_f <- (dfwf$workloadf0 == 550) & (dfwf$workloadg0 == 100) & (dfwf$workloadl0 == 100)
dcondition_g <- (dfwf$workloadf0 == 100) & (dfwf$workloadg0 == 550) & (dfwf$workloadl0 == 100)
dcondition_l <- (dfwf$workloadf0 == 100) & (dfwf$workloadg0 == 100) & (dfwf$workloadl0 == 550)
dselected_rows <- dfwf[dcondition_o,]
dselected_rowsf <- dfwf[dcondition_f, ]
dselected_rowsg <- dfwf[dcondition_g, ]
dselected_rowsl <- dfwf[dcondition_l, ]
h0 <- hypergraph_from_edgelist(DrawHyperGraphOfFunctions(dselected_rows))
h1 <- hypergraph_from_edgelist(DrawHyperGraphOfFunctions(dselected_rowsf))
h2 <- hypergraph_from_edgelist(DrawHyperGraphOfFunctions(dselected_rowsg))
h3 <- hypergraph_from_edgelist(DrawHyperGraphOfFunctions(dselected_rowsl))
#h2 <- hypergraph.add.edges(h,list(c('e0-f0','e0-g0','e0-l0'),c('e1-f0','e1-g0','e1-l0'),c('e2-f1','e2-g1','e2-l0'),c('e3-f1','e3-g1','e3-l0')))
plot(h0, vertex.color="lightblue", vertex.frame.color="darkblue", vertex.label.color="black",
edge_colors='red')
plot(h1, vertex.color="lightblue", vertex.frame.color="darkblue", vertex.label.color="black",
edge_colors='red')
plot(h2, vertex.color="lightblue", vertex.frame.color="darkblue", vertex.label.color="black",
edge_colors='red')
plot(h3, vertex.color="lightblue", vertex.frame.color="darkblue", vertex.label.color="black",
edge_colors='red')
# 按照 category 列进行分组
#test <- df[df$Type != "FunAssigned" | df$SolutionQuality != "non-optimal", ]
da_filter <- df[df$Xp != "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
#da_filter <- da_filter[da_filter$Type != "Random" , ]
data_w0 <- da_filter %>%
group_by(omegaf0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_w1 <- da_filter %>%
group_by(omegag0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
data_w2 <- da_filter %>%
group_by(omegal0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
# Represent it
P1 <- data_w0 %>%
ggplot( aes(x=omegaf0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",f[0]," as ", omega[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
+gghighlight::gghighlight(Type = FunAssigned)
combined_plot
combined_plot
