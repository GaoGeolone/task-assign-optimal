theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
+gghighlight::gghighlight(Type = FunAssigned)
P2 <- data_w1 %>%
ggplot( aes(x=omegag0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",g[0]," as ", omega[1])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P3 <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",l[0]," as ", omega[2])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
data_w2 <- da_filter %>%
group_by(omegal0,Type) %>%
summarise(
median = median(obj),  # 中位数
o1 = quantile(obj, 0.125),  # 下四分位数
o7 = quantile(obj, 0.875),  # 上四分位数
upper = min(o1, max(obj)),  # 上边缘
lower = max(o7, min(obj))  # 下边缘
)
# Represent it
P1 <- data_w0 %>%
ggplot( aes(x=omegaf0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",f[0]," as ", omega[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
+gghighlight::gghighlight(Type = FunAssigned)
P2 <- data_w1 %>%
ggplot( aes(x=omegag0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",g[0]," as ", omega[1])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P3 <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",l[0]," as ", omega[2])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
data_w2 <- da_filter %>%
group_by(omegal0,Type) %>%
summarise(
median = median(obj),  # 中位数
q1 = quantile(obj, 0.25),  # 下四分位数
q3 = quantile(obj, 0.75),  # 上四分位数
upper = min(q3, max(obj)),  # 上边缘
lower = max(q1, min(obj))  # 下边缘
)
# Represent it
P1 <- data_w0 %>%
ggplot( aes(x=omegaf0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",f[0]," as ", omega[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
+gghighlight::gghighlight(Type = FunAssigned)
P2 <- data_w1 %>%
ggplot( aes(x=omegag0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",g[0]," as ", omega[1])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P3 <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",l[0]," as ", omega[2])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
Zoom <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme_ipsum() +
#geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.3)+
coord_cartesian(xlim = c(20, 40), ylim = c(200, 250)) +
annotate("rect", xmin = 3, xmax = 8, ymin = 4, ymax = 12, fill = "grey", alpha = 0.2)
# 使用 grid.arrange() 函数进行布局
grid.arrange(P3, Zoom, layout_matrix = layout)+
ggtitle("Performance Comparison of Different Scheduling Mechanisms")
Zoom
Zoom <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme_ipsum() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.3)+
coord_cartesian(xlim = c(20, 60), ylim = c(50, 250)) +
annotate("rect", xmin = 3, xmax = 8, ymin = 4, ymax = 12, fill = "grey", alpha = 0.2)
Zoom
Zoom <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme_ipsum() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.3)+
coord_cartesian(xlim = c(20, 60), ylim = c(0, 50)) +
annotate("rect", xmin = 3, xmax = 8, ymin = 4, ymax = 12, fill = "grey", alpha = 0.2)
Zoom
Zoom <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme_ipsum() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.3)+
coord_cartesian(xlim = c(20, 60), ylim = c(20, 80)) +
annotate("rect", xmin = 3, xmax = 8, ymin = 4, ymax = 12, fill = "grey", alpha = 0.2)
Zoom
Zoom <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
theme_ipsum() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.3)+
coord_cartesian(xlim = c(20, 50), ylim = c(20, 80)) +
annotate("rect", xmin = 3, xmax = 8, ymin = 4, ymax = 12, fill = "grey", alpha = 0.2)
Zoom
# Represent it
P1 <- data_w0 %>%
ggplot( aes(x=omegaf0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",f[0]," as ", omega[0])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
+gghighlight::gghighlight(Type = FunAssigned)
P2 <- data_w1 %>%
ggplot( aes(x=omegag0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",g[0]," as ", omega[1])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)+ theme(legend.position = "none")
P3 <- data_w2 %>%
ggplot( aes(x=omegal0, y=median, group=Type, color=Type)) +
geom_line() +
#scale_color_viridis(discrete = TRUE) +
#ggtitle("Performance Comparison of Different Scheduling Mechanisms") +
#theme_ipsum() +
scale_y_continuous(limits = c(0, 300)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=Type), alpha = 0.255)+
ylab("Minmax Workload")+
xlab(expression(paste("Frequency of function ",l[0]," as ", omega[2])))+
scale_fill_discrete_qualitative(palette = "Dark 3")+
theme(
plot.title = element_text(hjust = 0.5),  # 设置标题居中
axis.title.y = element_text(hjust = 0.5), # 设置y轴标签居中
axis.title.x = element_text(hjust = 0.5)  # 如果需要也可以设置x轴标签居中
)
combined_plot <- P1 + P2 + P3 +
plot_layout(ncol = 3)
combined_plot
View(df)
# 定义自定义函数
custom_function <- function(da_filter){
da_filter %>%
select(SolutionQuality)%>%
pivot_wider(
id_cols = c(count, omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
}
new_df <- custom_function(da_filter$count)
View(da_filter)
# 定义自定义函数
da_filter %>%
da_test <- da_filter %>%
select(SolutionQuality)%>%
pivot_wider(
id_cols = c(count, omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_filter)
# 定义自定义函数
da_filter %>%
da_test <- da_filter %>%
pivot_wider(
id_cols = c(count, omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
# 定义自定义函数
da_filter %>%
da_test <- da_filter %>%
pivot_wider(
names_from = Type,
values_from = obj)
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(count, omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_filter)
print(da_test)
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_test)
# 单样本 t 检验
test_2_1 <- da_test$EntityAssigned - da_test$FunAssigned
test_3_1 <- da_test$FOnlyCU - da_test$FunAssigned
test_4_1 <- da_test$FOnlyLK - da_test$FunAssigned
test_5_1 <- da_test$EOnlyCu - da_test$FunAssigned
test_6_1 <- da_test$EOnlyLK - da_test$FunAssigned
test_7_1 <- da_test$Random - da_test$FunAssigned
result <- t.test(test_2_1, mu = 0, alternative = "greater")
print(result)
max(test_2_1)
min(test_2_1)
min(test_3_1)
min(test_4_1)
result <- t.test(test_4_1, mu = 0, alternative = "greater")
print(result)
min(test_4_1)
# 单样本 t 检验test_2_1 <- na.omit(da_test$EntityAssigned - da_test$FunAssigned)
test_2_1 <- na.omit(da_test$EntityAssigned - da_test$FunAssigned)
test_3_1 <- na.omit(da_test$FOnlyCU - da_test$FunAssigned)
test_4_1 <- na.omit(da_test$FOnlyLK - da_test$FunAssigned)
test_5_1 <- na.omit(da_test$EOnlyCu - da_test$FunAssigned)
test_6_1 <- na.omit(da_test$EOnlyLK - da_test$FunAssigned)
test_7_1 <- na.omit(da_test$Random - da_test$FunAssigned)
result <- t.test(test_2_1, mu = 0, alternative = "greater")
print(result)
result.t
ggplot(test_2_1)
typeof(test_2_1)
View(df)
# 显著性检验
da_filter <- df[da_filter$SolutionQuality != "non-optimal" ,]
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_test)
da_filter <- df[df$Xp != "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
da_filter <- df[da_filter$Type == "FunAssigned" | da_filter$SolutionQuality != "non-optimal" ,]
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_test)
# 单样本 t 检验test_2_1 <- na.omit(da_test$EntityAssigned - da_test$FunAssigned)
test_2_1 <- na.omit(da_test$EntityAssigned - da_test$FunAssigned)
result1 <- t.test(test_2_1, mu = 0, alternative = "greater")
print(result)
da_filter <- df[da_filter$Type == "FunAssigned" | da_filter$SolutionQuality != "non-optimal" ,]
View(da_filter)
# 显著性检验
da_filter <- da_filter[da_filter$Type == "Random" | da_filter$SolutionQuality != "non-optimal" ,]
da_filter <- da_filter[da_filter$Type == "FunAssigned" | da_filter$SolutionQuality != "non-optimal" ,]
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_test)
# 单样本 t 检验test_2_1 <- na.omit(da_test$EntityAssigned - da_test$FunAssigned)
test_2_1 <- na.omit(da_test$EntityAssigned - da_test$FunAssigned)
test_3_1 <- na.omit(da_test$FOnlyCU - da_test$FunAssigned)
test_4_1 <- na.omit(da_test$FOnlyLK - da_test$FunAssigned)
test_5_1 <- na.omit(da_test$EOnlyCu - da_test$FunAssigned)
test_6_1 <- na.omit(da_test$EOnlyLK - da_test$FunAssigned)
test_7_1 <- na.omit(da_test$Random - da_test$FunAssigned)
print(result)
error<-da_test[da_test$FunAssigned>da_test$EntityAssigned]
error<-da_test[da_test$FunAssigned>da_test$EntityAssigned,]
print(error)
print(na.omit(error))
# 按照 category 列进行分组
test <- df[df$Type == "FunAssigned" & df$SolutionQuality == "non-optimal", ]
da_filter <- df[df$Xp != "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
# 显著性检验
da_filter <- da_filter[da_filter$Type == "FunAssigned" | da_filter$SolutionQuality != "non-optimal" ,]
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_test)
error<-da_test[da_test$FunAssigned>da_test$EntityAssigned,]
print(na.omit(error))
result1 <- t.test(test_3_1, mu = 0, alternative = "greater")
print(result)
result1 <- t.test(test_3_1, mu = 0, alternative = "greater")
print(result)
print(result)
result1 <- t.test(test_4_1, mu = 0, alternative = "greater")
result1 <- t.test(test_5_1, mu = 0, alternative = "greater")
result1 <- t.test(test_2_1, mu = 0, alternative = "greater")
result2 <- t.test(test_3_1, mu = 0, alternative = "greater")
result3 <- t.test(test_4_1, mu = 0, alternative = "greater")
result4 <- t.test(test_5_1, mu = 0, alternative = "greater")
result5 <- t.test(test_6_1, mu = 0, alternative = "greater")
result6 <- t.test(test_7_1, mu = 0, alternative = "greater")
print(result1)
print(result2)
print(result3)
print(result4)
print(result5)
print(result6)
# 显著性检验
da_filter <- da_filter[da_filter$Type != "FunAssigned" | da_filter$SolutionQuality != "non-optimal" ,]
# 按照 category 列进行分组
test <- df[df$Type == "FunAssigned" & df$SolutionQuality == "non-optimal", ]
# 显著性检验
da_filter <- da_filter[da_filter$Type != "FunAssigned" | da_filter$SolutionQuality != "non-optimal" ,]
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_test)
error<-da_test[da_test$FunAssigned>da_test$EntityAssigned,]
print(na.omit(error))
# 单样本 t 检验test_2_1 <- na.omit(da_test$EntityAssigned - da_test$FunAssigned)
test_2_1 <- na.omit(da_test$EntityAssigned - da_test$FunAssigned)
test_3_1 <- na.omit(da_test$FOnlyCU - da_test$FunAssigned)
test_4_1 <- na.omit(da_test$FOnlyLK - da_test$FunAssigned)
test_5_1 <- na.omit(da_test$EOnlyCu - da_test$FunAssigned)
test_6_1 <- na.omit(da_test$EOnlyLK - da_test$FunAssigned)
test_7_1 <- na.omit(da_test$Random - da_test$FunAssigned)
result1 <- t.test(test_2_1, mu = 0, alternative = "greater")
result2 <- t.test(test_3_1, mu = 0, alternative = "greater")
# 按照 category 列进行分组
test <- df[df$Type == "FunAssigned" & df$SolutionQuality == "non-optimal", ]
da_filter <- df[df$Xp != "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
# 显著性检验
da_filter <- da_filter[da_filter$Type != "FunAssigned" & da_filter$SolutionQuality != "non-optimal" ,]
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_test)
error<-da_test[da_test$FunAssigned>da_test$EntityAssigned,]
print(na.omit(error))
# 显著性检验
da_filter <- da_filter[!(da_filter$Type == "FunAssigned" & da_filter$SolutionQuality == "non-optimal") ,]
# 定义自定义函数
da_test <- da_filter %>%
pivot_wider(
id_cols = c(omegaf0, omegag0, omegaf1, omegag1, omegal0),
names_from = Type,
values_from = obj)
print(da_test)
error<-da_test[da_test$FunAssigned>da_test$EntityAssigned,]
print(na.omit(error))
print(da_test)
print(da_test)
da_test
print(da_test)
error<-da_test[da_test$FunAssigned>da_test$EntityAssigned,]
print(na.omit(error))
print(da_test)
# 按照 category 列进行分组
test <- df[df$Type == "FunAssigned" & df$SolutionQuality == "non-optimal", ]
da_filter <- df[df$Xp != "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]" ,]
# 显著性检验
da_filter <- da_filter[!(da_filter$Type == "FunAssigned" && da_filter$SolutionQuality == "non-optimal") ,]
